mod balances;
mod system;
mod support;
mod proof_of_existence;

// use std::clone;

use crate::support::Dispatch;

mod types {
	pub type AccountId = String;
	pub type Balance = u128;
	pub type BlockNumber = u32;
	pub type Nonce = u32;
	pub type Extrinsic = crate::support::Extrinsic<AccountId, crate::RuntimeCall>;
	pub type Header = crate::support::Header<BlockNumber>;
	pub type Block = crate::support::Block<Header, Extrinsic>;
	pub type Content = &'static str;
}

// These are all the calls which are exposed to the world.
// Note that it is just an accumulation of the calls exposed by each module.
/* TODO: Remove the `RuntimeCall`. This is now generated by the `#[macros::runtime]`. */
// pub enum RuntimeCall {
// 	// TODO: Not implemented yet.
// 	// BalancesTransfer { to: types::AccountId, amount: types::Balance },
// 	Balances(balances::Call<Runtime>),
// 	ProofOfExistence(proof_of_existence::Call<Runtime>),
// }

// This is our main Runtime.
// It accumulates all of the different pallets we want to use.
#[derive(Debug)]
#[macros::runtime]
pub struct Runtime {
	system: system::Pallet<Self>,
	balances: balances::Pallet<Self>,
	proof_of_existence: proof_of_existence::Pallet<Self>,
}

impl system::Config for Runtime {
	type AccountId = types::AccountId;
	type BlockNumber = types::BlockNumber;
	type Nonce = types::Nonce;
}

impl balances::Config for Runtime {
	// type AccountId = types::AccountId;
	type Balance = types::Balance;
}

impl proof_of_existence::Config for Runtime {
	type Content = types::Content;
}

/* TODO: Remove all this. It is now generated by the `#[macros::runtime]` attribute. */
// impl Runtime {
// 	// Create a new instance of the main Runtime, by creating a new instance of each pallet.
// 	fn new() -> Self {
// 		Self {
// 			system: system::Pallet::new(),
// 			balances: balances::Pallet::new(),
// 			proof_of_existence: proof_of_existence::Pallet::new(),
// 		}
// 	}
// 	// Execute a block of extrinsics. Increments the block number.
// 	fn execute_block(&mut self, block: types::Block) -> support::DispatchResult {
// 		/* TODO:
// 			- Increment the system's block number.
// 			- Check that the block number of the incoming block matches the current block number,
// 			  or return an error.
// 			- Iterate over the extrinsics in the block...
// 				- Increment the nonce of the caller.
// 				- Dispatch the extrinsic using the `caller` and the `call` contained in the extrinsic.
// 				- Handle errors from `dispatch` same as we did for individual calls: printing any
// 				  error and capturing the result.
// 				- You can extend the error message to include information like the block number and
// 				  extrinsic number.
// 		*/
// 		self.system.inc_block_number();
// 		if block.header.block_number != self.system.block_number() {
// 			return Err(&"block number does not match what is expected");
// 		}
		
		
// 		for (i, support::Extrinsic { caller, call }) in block.extrinsics.into_iter().enumerate() {
// 			self.system.inc_nonce(&caller);
// 			let _res = self.dispatch(caller, call).map_err(|e| {
// 				eprintln!(
// 					"Extrinsic Error\n\tBlock Number: {}\n\tExtrinsic Number: {}\n\tError: {}",
// 					block.header.block_number, i, e
// 				)
// 			});
// 		}
// 		Ok(())
// 	}
// }

/* TODO: Remove all this too. Dispatch logic is auto-generated. */
// impl crate::support::Dispatch for Runtime {
// 	type Caller = <Runtime as system::Config>::AccountId;
// 	type Call = RuntimeCall;
// 	// Dispatch a call on behalf of a caller. Increments the caller's nonce.
// 	//
// 	// Dispatch allows us to identify which underlying module call we want to execute.
// 	// Note that we extract the `caller` from the extrinsic, and use that information
// 	// to determine who we are executing the call on behalf of.
// 	fn dispatch(
// 		&mut self,
// 		caller: Self::Caller,
// 		runtime_call: Self::Call,
// 	) -> support::DispatchResult {
// 		match runtime_call {
// 			RuntimeCall::Balances(call) => {
// 				self.balances.dispatch(caller, call)?;
// 			},
// 			/* TODO: Dispatch `calls` to the `ProofOfExistence` pallet. */
// 			RuntimeCall::ProofOfExistence(call) => {
// 				self.proof_of_existence.dispatch(caller, call)?;
// 			},
// 		}
// 		Ok(())
// 	}
// }

fn main() {
	// Create a new instance of the Runtime.
	// It will instantiate with it all the modules it uses.
	let mut runtime = Runtime::new();
	let alice = "alice".to_string();
	let bob = "bob".to_string();
	let charlie = "charlie".to_string();

	// Initialize the system with some initial balance.
	runtime.balances.set_balance(&alice, 100);

	// // start emulating a block
	// runtime.system.inc_block_number();
	// assert_eq!(runtime.system.block_number(), 1);

	// // first transaction
	// runtime.system.inc_nonce(&alice);
	// let _res = runtime
	// 	.balances
	// 	.transfer(alice.clone(), bob, 30)
	// 	.map_err(|e| eprintln!("{}", e));

	// // second transaction
	// runtime.system.inc_nonce(&alice);
	// let _res = runtime.balances.transfer(alice, charlie, 20).map_err(|e| eprintln!("{}", e));

	// Here are the extrinsics in our block.
	// You can add or remove these based on the modules and calls you have set up.
	/*
		TODO: Replace the logic above with a new `Block`.
			- Set the block number to 1 in the `Header`.
			- Move your existing transactions into extrinsic format, using the
			  `Extrinsic` and `RuntimeCall`.
	*/
	let block_1 = types::Block {
		header: support::Header { block_number: 1 },
		extrinsics: vec![
			support::Extrinsic {
				caller: alice.clone(),
				// call: RuntimeCall::Balances(balances::Call::Transfer { to: bob, amount: 30 }),
				// call: RuntimeCall::Balances(balances::Call::Transfer {
					// call: RuntimeCall::Balances(balances::Call::transfer {
					call: RuntimeCall::balances(balances::Call::transfer {
					to: bob.clone(),
					amount: 30,
				}),
			},
			support::Extrinsic {
				// caller: alice,
				caller: alice.clone(),
				// call: RuntimeCall::Balances(balances::Call::Transfer { to: charlie, amount: 20 }),
				// call: RuntimeCall::Balances(balances::Call::transfer { to: charlie, amount: 20 }),
				call: RuntimeCall::balances(balances::Call::transfer { to: charlie, amount: 20 }),
			},
		],
	};

	/*
		TODO:
		Create new block(s) which execute extrinsics for the new `ProofOfExistence` pallet.
			- Make sure to set the block number correctly.
			- Feel free to allow some extrinsics to fail, and see the errors appear.
	*/

	let block_2 = types::Block {
		header: support::Header { block_number: 2 },
		extrinsics: vec![
			support::Extrinsic {
				caller: alice.clone(),
				// call: RuntimeCall::ProofOfExistence(proof_of_existence::Call::CreateClaim {
					// call: RuntimeCall::ProofOfExistence(proof_of_existence::Call::create_claim {
					// call: RuntimeCall::ProofOfExistence(proof_of_existence::Call::create_claim {
					call: RuntimeCall::proof_of_existence(proof_of_existence::Call::create_claim {
					claim: &"Hello, world!",
				}),
			},
			support::Extrinsic {
				caller: bob.clone(),
				// call: RuntimeCall::ProofOfExistence(proof_of_existence::Call::CreateClaim {
					// call: RuntimeCall::ProofOfExistence(proof_of_existence::Call::create_claim {
					call: RuntimeCall::proof_of_existence(proof_of_existence::Call::create_claim {
					claim: &"Hello, world!",
				}),
			},
		],
	};

	let block_3 = types::Block {
		header: support::Header { block_number: 3 },
		extrinsics: vec![
			support::Extrinsic {
				caller: alice,
				// call: RuntimeCall::ProofOfExistence(proof_of_existence::Call::RevokeClaim {
					// call: RuntimeCall::ProofOfExistence(proof_of_existence::Call::revoke_claim {
					call: RuntimeCall::proof_of_existence(proof_of_existence::Call::revoke_claim {
					claim: &"Hello, world!",
				}),
			},
			support::Extrinsic {
				caller: bob,
				// call: RuntimeCall::ProofOfExistence(proof_of_existence::Call::CreateClaim {
					// call: RuntimeCall::ProofOfExistence(proof_of_existence::Call::create_claim {
					call: RuntimeCall::proof_of_existence(proof_of_existence::Call::create_claim {
					claim: &"Hello, world!",
				}),
			},
		],
	};
	// Execute the extrinsics which make up our block.
	// If there are any errors, our system panics, since we should not execute invalid blocks.
	/*
		TODO:
		Use your `runtime` to call the `execute_block` function with your new block.
		If the `execute_block` function returns an error, you should panic!
		We `expect` that all the blocks being executed must be valid.
	*/
	runtime.execute_block(block_1).expect("invalid block");
	/* TODO: Execute your new block(s). */
	runtime.execute_block(block_2).expect("invalid block");
	runtime.execute_block(block_3).expect("invalid block");

	// Simply print the debug format of our runtime state.
	println!("{:#?}", runtime);
}
